# Generated by Django 5.0 on 2023-12-19 05:34

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=20, verbose_name='Название блюда')),
                ('proteins', models.FloatField(blank=True, verbose_name='Белки')),
                ('fats', models.FloatField(blank=True, verbose_name='Жиры')),
                ('carbohydrates', models.FloatField(blank=True, verbose_name='Углеводы')),
                ('calories', models.FloatField(blank=True, verbose_name='Калории')),
            ],
            options={
                'verbose_name': 'Блюдо',
                'verbose_name_plural': 'Блюда',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=20, verbose_name='Название продукта')),
                ('proteins', models.FloatField(blank=True, verbose_name='Белки')),
                ('fats', models.FloatField(blank=True, verbose_name='Жиры')),
                ('carbohydrates', models.FloatField(blank=True, verbose_name='Углеводы')),
                ('calories', models.FloatField(blank=True, verbose_name='Калории')),
            ],
            options={
                'verbose_name': 'Продукт',
                'verbose_name_plural': 'Продукты',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birth_date', models.DateField(default=datetime.date(2000, 1, 1), verbose_name='Дата рождения')),
                ('height', models.IntegerField(verbose_name='Рост')),
                ('weight', models.IntegerField(verbose_name='Вес')),
                ('gender', models.CharField(choices=[('MAN', 'Мужчина'), ('WOMAN', 'Женщина')], default='MAN', max_length=5)),
                ('physical_activity', models.CharField(choices=[('VL', 'Очень низкая физическая активность'), ('L', 'Низкая физическая активность'), ('A', 'Средняя физическая активность'), ('H', 'Высокая физическая активность'), ('VH', 'Очень высокая физическая активность')], default='VL', max_length=9)),
                ('target', models.CharField(choices=[('LWeight', 'Похудеть'), ('MWeight', 'Поддерживать вес'), ('GWeight', 'Набрать вес')], default='LWeight', max_length=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['email', 'birth_date'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grams', models.FloatField(blank=True, verbose_name='граммовки этого продукта')),
                ('dishID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.dish', verbose_name='Блюдо')),
                ('productID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Рецепт',
                'verbose_name_plural': 'Рецепты',
                'ordering': ['dishID'],
            },
        ),
    ]
